<div class="flex-item excess">
  <h2 id="the-last-hope">The Last Hope</h2>
  <div
    class="visual-presentation-container"
    style="position: relative; display: inline-block; cursor: pointer"
  >
    <a href="https://simmer.io/@DerCalvino/thelasthope" target="_blank">
      <video width="100%" poster="TheLastHopeThumbnail.png" controls loop>
        <source src="TheLastHope.mp4" alt="TheLastHope" type="video/mp4" />
        Ihr Browser unterstützt den Video-Tag nicht
      </video>
    </a>
    <div class="klicken-indicator">Klicken zum Spielen</div>
    <div class="primary-info-container">
      <div class="team-size-container">
        <span><i class="fas fa-users"></i>&nbsp;&nbsp;6</span>
      </div>
      <div class="context-awards">
        <i class="fa fa-university"></i>
        <i class="fas fa-award"></i>
      </div>
      <div class="tags">
        <span class="tag">Rouge-like</span>
        <span class="tag">NavMesh</span>
      </div>
      <span class="duration"><i class="fa fa-calendar"></i>&nbsp;&nbsp;6m</span>
    </div>
  </div>
  <h4>
    Gamedesign-Workhop<br />
    6-köpfiges Team<br />
    Sommer – Herbst 2022<br />
    Rouge-like, IndieNight-Auszeichnung
  </h4>
  <br />
  <div class="skills">
    <strong>Unity (C#), NavMesh</strong><br />
    <em>Kreativ – Kooperativ – Interdisziplinär</em><br />
    <strong
      >Gameplay-Design, Wireframes, User Tests, Klassendiagramme, Sounddesign,
      Kanban-Board, SCRUM, Git</strong
    ><br />
  </div>
  <br />
  <ul class="task-list">
    <li>
      <strong>Spielmechanik & Physik</strong><br />
      <span>Programmierung der Spielphysik und Mechaniken</span>
      <ul>
        <li>Beschwörungs- und Zauberkampfsystem, Spielbalance</li>
      </ul>
    </li>
    <li>
      <strong>KI-Controller</strong><br />
      <span>Logik von KI-Gegneris (Unity-NavMesh)</span>
      <ul>
        <li>Bewegungssteuerung, intelligentes Angreifen</li>
      </ul>
    </li>
    <li>
      <strong>Sound & Animation</strong><br />
      <span>Integration von Soundeffekten und Animationen</span>
    </li>
    <li>
      <strong>User Interface</strong><br />
      <span>Design und Implementierung der Bedienoberfläche</span><br />
      <ul>
        <li>Kombination von Fähigkeitskarten</li>
      </ul>
    </li>
  </ul>
  <div class="controls">
    W, A, S, D zum Laufen<br />
    Maustasten, Q, E zum Angreifen<br />
    Inventar: I<br />
    Fähigkeitskarten kombinieren: Drag and Drop
  </div>
  <!-- "Conflux - TheLastHope" entstand in einem sechsköpfigen Team. Im Kurs "Gamedesign Workshop" des sechsten Semesters programmierte ich den Großteil des Unity-Spiels, wie Spielmechanik, Physik-, Animations-, Sound- und KI-Controller, sowie UserInterfaces und Spielbalance. Begonnen mit Themenwahl, Abstimmung über Spielideenvorstellung und einer gemeinsamen Vision und Moodboard, einigten wir uns auf ein Rouge-like, dessen Story sich an H.P.Lovecrafts "Cthulhu-Mythos" orientiert. Der Spieler als Auserwählter utilisiert die 4 Elemente von Gott und Teufel kombinatorisch, um gegen die drohende Instabilisierung des Gleichgewichts durch Cthulhu der Erde anzukämpfen. Es folgten Gameplaypillars und -Loops, USP-Definition, Wireframes für Menüs und Fähigkeitskarten, Bedienungsprofile, Klassendiagramme, Sounddesign, Kanban-Boards und Priorisierungslisten, während in SCRUM-Meetings sorgfältig protokolliert und reviewed wurde. Hierbei half die bereits vorhandene Erfahrung im professionellen Umfeld bei <a href="https://www.weltenbauer-se.com/de">weltenbauer. Software Entwicklung GmbH</a>.  
    Das Projekt endete mit UserTests inklusive Fragebögen, sowie dem Gewinnen der Projektauszeichnung bei der "IndieNight" an der Hochschule Furtwangen.  
    Laufen erfolgt mit W A S D, Angreifen mit den Maustasten, Q und E. I öffnet das Inventar. Drag and Drop von einer Fähigkeitskarte auf eine andere ermöglicht das Kombinieren. -->
</div>
<div class="flex-item excess">
  <div class="toggle-content heading-toggle-content">
    <h2 id="realtime-beerpong">Realtime-BeerPhong</h2>
  </div>
  <div
    id="multi-display"
    class="visual-presentation-container"
    style="display: flex; justify-content: space-between"
  >
    <a
      href="https://calvindo.github.io/Realtime-BeerPhong/aFrame.html"
      target="_blank"
    >
      <div style="position: relative">
        <img
          src="BeerPhong.jpeg"
          style="width: 100%; height: auto; max-width: 100%"
        />
        <div class="klicken-indicator">Klicken<br />zum<br />Spielen</div>
      </div>
    </a>
    <a href="BeerPhongMarker.png" download>
      <div style="position: relative">
        <img
          src="BeerPhongMarker.png"
          style="width: 100%; height: auto; max-width: 100%"
        />
        <div id="klicken-beerphong-special-indicator" class="klicken-indicator">
          Klicken<br />zum<br />Marker
        </div>
      </div>
    </a>
    <div class="toggle-arrow">
      <span class="toggle-arrow-span"><i class="fas fa-times"></i></span>
    </div>
  </div>
  <div class="primary-info-container">
    <div class="team-size-container">
      <span><i class="fas fa-users"></i>&nbsp;&nbsp;3</span>
    </div>
    <div class="context-awards">
      <i class="fa fa-university"></i>
    </div>
    <div class="tags">
      <span class="tag">WebAR</span>
      <span class="tag">GLSL</span>
      <span class="tag">JS</span>
      <span class="tag">Three.js</span>
    </div>
    <span class="duration"><i class="fa fa-calendar"></i>&nbsp;&nbsp;3m</span>
  </div>
  <div class="toggle-content second-toggle-content">
    <h4>
      Echtzeit-Computergrafik<br />
      Trio-Team<br />
      Herbst 2022<br />
      Mobile Web-AR Partyspiel
    </h4>
  </div>
  <div class="toggle-content third-toggle-content">
    <br />
    <div class="skills">
      <strong>WebAR, JavaScript, GLSL, Three.js</strong><br />
      <em>Innovativ – Kollaborativ – Kreativ</em><br />
      <strong>Dokumentation, UI/UX, Sprint-Meetings, Git</strong>
    </div>
    <br />
    <ul class="task-list">
      <li>
        <strong>Shader-Programmierung</strong><br />
        <span
          >Erstellung von Vertex- und Fragment-Shadern für AR-Rendering</span
        >
        <ul>
          <li>Beleuchtung, Materialeffekte, visuelle Optimierung</li>
        </ul>
      </li>
      <li>
        <strong>Physik & Wurfmechanik</strong><br />
        <span>Implementierung der Ballflugbahn</span>
        <ul>
          <li>Aufprall- und Abprall-Logik, Touchscreen-Gestensteuerung</li>
        </ul>
      </li>
      <li>
        <strong>Augmented Reality & Web-Integration</strong><br />
        <span>Nutzung von WebAR & Three.js</span>
        <ul>
          <li>Platzierung des Spieltisches über einen AR-Marker</li>
        </ul>
      </li>
    </ul>
    <div class="controls">
      Smartphone-Kamera auf Marker richten<br />
      Swipen zum Werfen<br />
    </div>
  </div>
  <!-- Dieses webbasierte Mobile-Game erfordert einen AR-Marker, über dem auf dem Smartphone ein Beerpong-Tisch mit Bechern als Ziele generiert wird. Der Spieler bewegt sich um den Tisch herum, um aus einer günstigen Abwurfposition heraus den Ball mit einem Swipe auf dem Touchscreen so in die Spielszene zu werfen, dass er direkt oder nach Aufkommen auf der Platte in einem Becher landet.  
    Die Umsetzung innerhalb des Kurses "Echtzeit-Computergrafik" im sechsten Semester erfolgte mit WebAR, JavaScript und GLSL. In einem dreiköpfigen Team machten wir uns mit Programmierung von Vertex- und Fragmentshadern vertraut, sowie mit Umgebungsvariablen von WebAR und "Three.js". -->
</div>

<div class="flex-item excess">
  <h2 id="gesetzestext-generator">Gesetzestext-Generator</h2>
  <div
    class="visual-presentation-container"
    style="position: relative; display: inline-block; cursor: pointer"
  >
    <a
      href="https://colab.research.google.com/github/CalvinDO/AITextGenerator/blob/main/LawLanguageRNN/textGenerator.ipynb"
      target="_blank"
    >
      <img src="TextGenerator.png" width="100%" />
    </a>
    <div class="klicken-indicator">Klicken zum Anwenden</div>
    <div class="primary-info-container">
      <div class="team-size-container">
        <i class="material-icons">person</i>1
      </div>
      <div class="context-awards">
        <i class="fas fa-umbrella-beach"></i>
      </div>
      <div class="tags">
        <span class="tag">Python</span>
        <span class="tag">TensorFlow</span>
        <span class="tag">RNN</span>
        <span class="tag">GRU</span>
      </div>
      <span class="duration"
        ><i class="fa fa-calendar"></i>&nbsp;&nbsp;10d</span
      >
    </div>
  </div>
  <h4>
    Introduction to Deep Learning<br />
    Solo-Selbststudium<br />
    Frühling 2022<br />
    AI-Experiment
  </h4>
  <br />
  <div class="skills">
    <strong
      >Python, Keras (TensorFlow), Jupyter Notebook, Language Model, Recurrent
      Neural Networks (RNN), GRU</strong
    ><br />
    <em>Forschungsorientiert – Innovativ – Selbstständig</em><br />
    <strong>Google Colab, Git</strong><br />
  </div>
  <br />
  <ul class="task-list">
    <li>
      <strong>Trainingsdatensatz & Vorverarbeitung</strong><br />
      <span
        >Erstellung eines Textmodells mit Bürgergesetzbuch als
        Trainingsdaten</span
      >
      <ul>
        <li>Umwandlung des Textes in sequenzielle Eingaben und Zielzeichen</li>
      </ul>
    </li>
    <li>
      <strong>Neuronale Netzwerk-Architektur</strong><br />
      <span>Implementierung eines GRU-basierten RNNs in Keras</span>
      <ul>
        <li>Architektur aus Embedding, GRU und Dense-Schichten</li>
      </ul>
    </li>
    <li>
      <strong>Textgenerierung</strong><br />
      <span
        >Erzeugung von neuen Paragraphen basierend auf beliebigen
        Startzeichen</span
      >
      <ul>
        <li>Anpassung der Vorhersage durch Temperatur</li>
      </ul>
    </li>
    <li>
      <strong>Zukünftige Erweiterungen</strong><br />
      <span>Testen von LSTM und GPT für verbesserte Textgenerierung</span>
      <ul>
        <li>Vergleich der Performance und Effizienz</li>
      </ul>
    </li>
  </ul>
  <div class="controls">
    Code-Blöcke in Colab ausführen, Kommentare beachten
  </div>
  <!-- Das Bürgergesetzbuch als Trainingsdaten eingespeist, "erfindet" mein Gesetzestext-Generator neue Paragraphen am laufenden Band. Dieses Freizeitprojekt ist eine --darüber hinausgehung-- des Kurses "Introduction to Deep Learning" im fünften Semester, in dem ich bereits Logistische Regression mit BCE und Softmax, Backpropagation und Convolutional Neural Networks erlernte.  
    Das gesamte Projekt wurde in einem Jupyter Notebook mit Python entwickelt. Zuerst werden die Trainingsdaten für das Language Model, hier das Gesetzbuch als String mit 1,8 Millionen Zeichen, geladen, und einzigartige Zeichen im Text analysiert. Diesen werden IDs zugeordnet und der Text in eine Sequenz von solchen umgewandelt. In Input- und Target-Sequenzen aufgeteilt, stellt das Target das nächste Zeichen der Sequenz dar.
    Für die Architektur wählte ich das Keras Model von Tensorflow mit einem GRU (Gated Recurrent Unit) Layer als Hauptkomponente. Vorrangeschaltet ist ein Embedding-Layer, in dem eine beliebig lange Input-Sequenz zu einem dichten Vektor umgewandelt wird, während eine vollständig verbundene Dense-Schicht den finalen Output berechnet - der Wahrscheinlichkeit für das nächste Zeichen.  
    Nach der Erstellung des Modells wird es mit dem vorbereiteten Datenset trainiert. Ich habe die SparseCategoricalCrossentropy-Loss-Funktion verwendet, um den Fehler zwischen den Vorhersagen und den Zielzeichen zu messen. An diesem Loss lernt das Modell, und versucht, ihn zu minimieren. Auch habe ich einen Checkpoint-Mechanismus zur Persistenz eingerichtet.  
    Das Modell generiert nun auf Basis eines gegebenen Startzeichens mit einem One Step Model Zeichen für Zeichen neuen Text. Bei jedem Schritt trifft das Modell eine Vorhersage für das nächste Zeichen, wobei die Wahrscheinlichkeiten für mögliche Zeichen mittels der Temperatur angepasst werden können. Dies beeinflusst, wie zufällig oder deterministisch die generierten Zeichen sind.  
    Geplant ist Implementierung von und Testen der Performance von LSTM als weitere RNN-Struktur am Bürgergesetzbuch, sowie GPT als generativer Transformer wegen Self-Attention- und Parallelisierungsmechanismen. Auch würde die Verwendung einer Wörterbuch-Datenbank würde Effizienz in dem Use Case des Gesetzesbuchs deutlich steigern, allerdings zu weniger komischen Neologismen führen. -->
</div>
<div class="flex-item excess">
  <h2 id="baumgenerator">Baumgenerator</h2>
  <div
    class="visual-presentation-container"
    style="position: relative; display: inline-block; cursor: pointer"
  >
    <a href="Code/TreeGenerator/TreeGenerator.zip" download>
      <img src="TreeGenerator.png" width="100%" />
    </a>
    <div class="klicken-indicator">Klicken zum Downloaden</div>
    <div class="primary-info-container">
      <div class="team-size-container">
        <span><i class="fas fa-users"></i>&nbsp;&nbsp;3</span>
      </div>
      <div class="context-awards">
        <i class="fa fa-university"></i>
      </div>
      <div class="tags">
        <span class="tag">Blender API</span>
        <span class="tag">Vektorrechnung</span>
      </div>
      <span class="duration"><i class="fa fa-calendar"></i>&nbsp;&nbsp;3m</span>
    </div>
  </div>
  <h4>
    Datenverarbeitung in der Medienproduktion<br />
    Trio-Team<br />
    Frühling 2022<br />
    Blender-Addon
  </h4>
  <br />
  <div class="skills">
    <strong>Python, Blender API, Vektorrechnung</strong><br />
    <em>Kollaborativ – Systematisch – Flexibel</em><br />
    <strong>Roadmap, Kanban, Git</strong>
  </div>
  <br />
  <ul class="task-list">
    <li>
      <strong>Parametrisierte Baumgenerierung</strong><br />
      <span>Entwicklung eines Addons zur Generierung prozeduraler Bäume</span>
      <ul>
        <li>
          Einstellbare Ast-Abspaltungen, Ausrichtung, Radius, Zufallsfaktoren
        </li>
      </ul>
    </li>
    <li>
      <strong>Rekursion & Vektorrechnung</strong><br />
      <span>Vertiefung und Erweiterung des technischen Vokabulars</span>
      <ul>
        <li>Rekursive Python-Programmierung</li>
        <li>Rodrigues-Rotationsformel, Kreuzprodukt, ...</li>
      </ul>
    </li>
    <li>
      <strong>Blender-Addon-Integration</strong><br />
      <span>Realisierung als Addon in Blender mit User-Interface</span>
      <ul>
        <li>Nutzung der Blender-API</li>
      </ul>
    </li>
  </ul>
  <div class="controls">
    "Addon.py" importieren, "Generate Tree"-Button im Scene-Tab des
    Property-Windows klicken
  </div>
  <!-- Diesen parametrisierten Baumgenerator als Blender-Addon entwickelte ich in einem Team, bestehend aus einem weiteren Programmierer und Grafiker, der die Blätter und die Rinde der Bäume entwarf. Benutzer können in dem Tooltip die Anzahl der Ast-Abspaltungen, die Ausrichtungsstärke gen Himmel und den Radi us einstellen. Auch rekursive Parameter eines jeden Astes zu seinem auswachsenden Ast sind einstellbar, Verkürzung der Länge und des Radius', Änderung der Verkürzung der Winkel und Zufallsabweichung. Nach Import der "Addon.py"-Datei finden Sie einen "Generate Tree"-Button im Scene-Tab des Property-Windows.  
  Bei der objektorientierten Programmierung lernte ich die Rodrigues-Rotationsformel kennen und wandte andere Vektorrechnung wie das Kreuzprodukt an. Auch mit Blender-eigenen Umgebungsvariablen und Python machte ich mich vertraut. Die Instanzierung der Astaustriebe ähnelt dem Projekt [Fraktal](#fraktal)  
  Die Programmierung erfolgte im fünften Semester im Rahmen des Kurses "Datenverarbeitung in der Medienproduktion". -->
</div>
<div class="flex-item excess">
  <h2 id="discombobulated-space-station">Discombobulated Space Station</h2>
  <div
    class="visual-presentation-container"
    style="position: relative; display: inline-block; cursor: pointer"
  >
    <a href="https://calvindo.github.io/PRIMA/" target="_blank">
      <video
        width="100%"
        poster="DiscombobulatedSpaceStationThumbnail.jpg"
        controls
        loop
      >
        <source
          src="DiscombobulatedSpaceStation.mp4"
          alt="DiscombobulatedSpaceStation"
          type="video/mp4"
        />
        Ihr Browser unterstützt den Video-Tag nicht
      </video>
    </a>
    <div class="klicken-indicator">Klicken zum Spielen</div>
    <div class="primary-info-container">
      <div class="team-size-container">
        <i class="material-icons">person</i>1
      </div>
      <div class="context-awards">
        <i class="fa fa-university"></i>
      </div>
      <div class="tags">
        <span class="tag">FUDGE</span>
        <span class="tag">Blender</span>
      </div>
      <span class="duration"><i class="fa fa-calendar"></i>&nbsp;&nbsp;3m</span>
    </div>
  </div>
  <h4>
    Prototyping Interaktiver Medien-Apps & Games<br />
    Solo-Projekt<br />
    Herbst 2022<br />
    3D-Labyrinth-Spiel
  </h4>
  <br />
  <div class="skills">
    <strong>TypeScript, FUDGE, Blender</strong><br />
    <em>Innovativ – Inkubierend – Kreativ</em><br />
    <strong>Designdokument, Git</strong>
  </div>
  <br />
  <ul class="task-list">
    <li>
      <strong>Konzeption und Prototyping</strong><br />
      <span>Labyrinth-Spiel mit drehbarer Raumstation</span>
      <ul>
        <li>Bewegung zum Ziel durch Rotation der Raumstation</li>
      </ul>
    </li>
    <li>
      <strong>Technische Umsetzung</strong><br />
      <span>Einsatz der Pre-Alpha-Engine FUDGE</span>
      <ul>
        <li>Entwicklung mit didaktischem Framework</li>
      </ul>
      <span>Entwicklung eines eigenen Blender-Map-Importers</span>
      <ul>
        <li>Import von Objektpositionen und Rotationen aus Collada-Dateien</li>
      </ul>
    </li>
  </ul>
  <div class="controls">
    Bewegung: W A S D<br />
    Rotation: Q, E, Shift, Control<br />
    Hopsen: Leertaste
  </div>
  <!-- Dieses 3D-Labyrinth Spiel habe ich mit TypeScript und <a href = "https://github.com/hs-furtwangen/FUDGE">FUDGE</a> programmiert, einer Node-basierten didaktischen Engine und Editor für webbasierte Spiele.  
    Der Spieler kann mit dem Character nicht fliegen und nur minimal springen, allerdings die gesamte Raumstation um seine Position herum auf verschiedenen Achsen drehen, um bei konstanter Schwerkraft einen Weg (oder Fall) durch das Labyrinth zu ermöglichen.  
    Als das Projekt im vierten Semester innerhalb des Kurses "Prototyping Interaktiver Medien-Apps und Games" entstand, war FUDGE noch nicht ausgereift genug, um die Labyrinth-Elemente effizient im nativen Editor anzuordnen. Dieses Problem löste ich, indem ich einen eigenen Blender-Map-Importer entwickelte, Der die Objektpositionen und Rotationen aus einer Collada-Datei ausliest.  
    Laufen erfolgt mit W A S D. Gedreht wird die Raumstation durch Shift, Control, Q und E. -->
</div>
<div class="flex-item excess">
  <h2 id="eisladen">Eisladen</h2>
  <div
    class="visual-presentation-container"
    style="position: relative; display: inline-block; cursor: pointer"
  >
    <a href="https://calvindo.github.io/GiS/Eisladen/" target="_blank">
      <video width="100%" poster="EisladenThumbnail.png" controls loop>
        <source src="Eisladen.mp4" alt="Eisladen" type="video/mp4" />
        Ihr Browser unterstützt den Video-Tag nicht
      </video>
    </a>
    <div class="klicken-indicator">Klicken zum Spielen</div>
    <div class="primary-info-container">
      <div class="team-size-container">
        <i class="material-icons">person</i>1
      </div>
      <div class="context-awards">
        <i class="fa fa-university"></i>
      </div>
      <div class="tags">
        <span class="tag">HTML</span>
        <span class="tag">CSS</span>
        <span class="tag">JSON</span>
        <span class="tag">MongoDB</span>
      </div>
      <span class="duration"><i class="fa fa-calendar"></i>&nbsp;&nbsp;3m</span>
    </div>
  </div>
  <h4>
    Grundlagen Interaktiver Systeme<br />
    Solo-Projekt<br />
    Herbst 2020<br />
    Spielerischer Web-Shop
  </h4>
  <br />
  <div class="skills">
    <strong>HTML, CSS, JSON, TypeScript, LocalStorage, Node.js, MongoDB</strong
    ><br />
    <em>Interaktiv – Kreativ – Progressiv</em><br />
    <strong>Wireframe, Git</strong>
  </div>
  <br />
  <ul class="task-list">
    <li>
      <strong>Spielerische Umsetzung einer Web-Shop Aufgabe</strong><br />
      <span>Arcade-Greifer</span>
      <ul>
        <li>Eisbehälter, aus denen Eis entnommen wird</li>
      </ul>
      <span>Toppings hinzufügen</span>
      <ul>
        <li>
          Interaktive Toppings können aus Behältern auf die Eiskugeln über
          Förderbänder gestreut werden
        </li>
      </ul>
    </li>
    <li>
      <strong>Backend</strong><br />
      <span>Verkäuferi kann in eigenem Bereich Bestellungen bearbeiten</span>
      <ul>
        <li>MongoDB-Server mit Atlas (Wartungsarbeiten eingestellt)</li>
      </ul>
    </li>
    <li>
      <strong>Ohne Game-Engine oder Editor</strong><br />
      <span>Grafiken mit HTML-CanvasRenderingContext2D</span>
      <ul>
        <li>Komposition von Zeichenbefehlen zu Rädern, Boxen, Werkzeugen</li>
      </ul>
      <span>Logiken mit TypeScript</span>
      <ul>
        <li>Programmierung von Physik, Animation und Spielmechanik</li>
      </ul>
    </li>
  </ul>
  <div class="controls">
    Greifer Bewegen: Pfeiltasten<br />
    Greifer Öffnen/Schließen: Leertaste<br />
    Toppings Öffnen/Schließen: Klicken
  </div>
  <!-- Der Eisladen ist eine spielerische Lösung der Aufgabe, eine Website zu entwickeln, auf der Nutzer Eislieferungen aufgeben können --und der Verkäufer sie über einen Server bearbeiten kann--. Als letzte Prüfung des Kurses "Grundlagen interaktiver Systeme" im zweiten Semester ging ich weit über die Fragestellung hinaus und realisierte die Zusammenstellung der Delikatessen mit einem Arcade-Greifer, gesteuert über Pfeiltasten und der Leertaste. Auch Toppings können durch Klicken interaktiv aus Behältern über ein Förderband auf die Eiskugeln gestreut werden.  
      Außer der Eisbehälter ist jede Grafik und Logik selbstgemacht, mit Zeichenmethoden des HTML-CanvasRenderingContext2Ds. -->
</div>
<div class="flex-item excess">
  <h2 id="dischoverhfu">DiscHoverHFU</h2>
  <div
    class="visual-presentation-container"
    style="position: relative; display: inline-block; cursor: pointer"
  >
    <a
      href="https://calvindo.github.io/DiscHoverHFU/Code/DiscHoverHFU.html"
      target="_blank"
    >
      <video width="100%" poster="DiscHoverHFUThumbnail.png" controls loop>
        <source src="DiscHoverHFU.mp4" alt="DiscHoverHFU" type="video/mp4" />
        Ihr Browser unterstützt den Video-Tag nicht
      </video>
    </a>
    <div class="klicken-indicator">Klicken zum Spielen</div>
    <div class="primary-info-container">
      <div class="team-size-container">
        <span><i class="fas fa-users"></i>&nbsp;&nbsp;2</span>
      </div>
      <div class="context-awards">
        <i class="fa fa-university"></i>
        <i class="fa-solid fa-360-degrees"></i>
      </div>
      <div class="tags">
        <span class="tag">360°</span>
        <span class="tag">WebXR</span>
        <span class="tag">AdobeXD</span>
        <span class="tag">OpenStreetMap</span>
      </div>
      <span class="duration"><i class="fa fa-calendar"></i>&nbsp;&nbsp;3m</span>
    </div>
  </div>
  <h4>
    User Experience Design<br />
    Duo-Team<br />
    Herbst 2020<br />
    360° Point-and-Click
  </h4>
  <br />
  <div class="skills">
    <strong
      >TypeScript, HTML, CSS, LocalStorage, OpenStreetMap, JSON, WebXR,
      AdobeXD</strong
    ><br />
    <em>Interdisziplinär – Innovativ – Wegweisend</em><br />
    <strong>Wireframes, Sitemaps, User Journey, Visuelle Guides, Git</strong>
  </div>
  <br />
  <ul class="task-list">
    <li>
      <strong>Interaktive Schnitzeljagd</strong><br />
      <span
        >Erstie-Rallye der Hochschule als 360-Point-and-Click Adventure</span
      >
      <ul>
        <li>Leiten der Nutzeris durch die Anwendung</li>
      </ul>
    </li>
    <li>
      <strong>Panorama-Touren</strong><br />
      <span>Erstellung interaktiver Panorama-Touren durch die Hochschule</span>
      <ul>
        <li>Programmierung mit WebXR und eigenen Methoden</li>
      </ul>
    </li>
    <li>
      <strong>Datenstruktur & Interaktionen</strong><br />
      <span>Verwendung von JSON für 104 Collectibles in 27 Räumen</span>
      <ul>
        <li>Name, Position, Interaktionsgeräusch</li>
      </ul>
    </li>
  </ul>
  <div class="controls">
    Drehen & Entdecken: Maus gedrückthalten & Bewegen<br />
    Menü öffnen/schließen: E
  </div>
  <!-- Ziel dieses 360°-Point-And-Click Adventures ist die spielerische Umsetzung der "Erstie-Rallye" - einer Schnitzeljagd an der HFU für Neulinge. Im Rahmen des Kurses "User Experience Design" im zweiten Semester entwickelt, sahen wir die Notwendigkeit einer digitalen Version der Rallye wegen den Einschränkungen durch die Corona-Pandemie. Zu zweit planten wir mit Sitemaps, Wireframes, Visuellen- und Soundstyleguides, entwickelten mit TypeScript, HTML und CSS.  
      Durch Gedrückthalten und Bewegung der Maus kann der Spieler sich in den Räumen der HFU drehen und somit Ausrüstung der Hochschule entdecken. Mit der "E"-Taste öffnet sich das Menü, in dem auf die OpenStreetMap-Karte gewechselt und in dieser zu den Räumen navigiert werden kann.  
      Die Umsetzung erfolgte mit zweidimensionalen Panorama-Bildern, die durch WebXR-Polyfill und eigene Programmierung zu interaktiven Panorama-Touren wurden. Als Datenstruktur für Winkelkoordinaten der 104 Gegenstände, sowie deren Namen und Geräusch der Interaktion, wurde JSON verwendet. -->
</div>
<div class="flex-item excess">
  <h2 id="fraktal-animation">Fraktal Animation</h2>
  <div
    class="visual-presentation-container"
    style="position: relative; display: inline-block; cursor: pointer"
  >
    <a href="Code/FraktalAnimation/start.html" target="_blank">
      <video width="100%" controls loop poster="FraktalAnimation.PNG">
        <source
          src="FraktalAnimation.mp4"
          alt="Morbus-Animi"
          type="video/mp4"
        />
        Ihr Browser unterstützt den Video-Tag nicht
      </video>
    </a>
    <div class="klicken-indicator">Klicken zum Anwenden</div>
    <div class="primary-info-container">
      <div class="team-size-container">
        <i class="material-icons">person</i>1
      </div>
      <div class="context-awards">
        <i class="fas fa-umbrella-beach"></i>
      </div>
      <div class="tags">
        <span class="tag">Animation</span>
      </div>
      <span class="duration"><i class="fa fa-calendar"></i>&nbsp;&nbsp;2d</span>
    </div>
  </div>
  <h4>
    Erweiterung von Fraktal<br />
    Solo-Projekt<br />
    Sommer 2019<br />
    Animierte <a href="#fraktal">Fraktale</a>
  </h4>
  <br />
  <div class="skills">
    <strong>TypeScript, CanvasRenderingContext2D, Rekursion, Animation</strong
    ><br />
    <em>Erweiternd – Aufbauend – Mathematisch</em><br />
    <strong>Git</strong>
  </div>
  <br />
  <ul class="task-list">
    <li>
      <strong>Zusätzliche Dimension durch Bewegung</strong><br />
      <span>Erforschung der zeitlichen Modulation von Parametern</span>
      <ul>
        <li>Farbwinkel und Kreispositionen werden dynamisch verändert</li>
        <li>Einfluss des Divisors eines Vollkreises auf Musterbildung</li>
      </ul>
    </li>
    <li>
      <strong>Neue Beobachtungen und Experimente</strong><br />
      <span
        >Unvorhersehbare visuelle Effekte durch kontinuierliche
        Transformation</span
      >
      <ul>
        <li>
          Übergänge von Farbkonstellationen und Strukturen im kleinsten Detail
          erkennbar
        </li>
      </ul>
    </li>
  </ul>
  <div class="controls">
    Parameter können verändert werden, um die Animation zu beeinflussen
  </div>
  <!-- Zugrunde liegt das zuvor beschriebene Projekt [Fraktal](#fraktal). Diesmal mit dem Ziel, einige Parameter der Berechnung, die sich als Dezimalbrüche darstellen lassen, wie beispielsweise der Farbwinkel, zeitlich zu modulieren, um eine zusätzliche Dimension zu schaffen, die ebenso zu etlichen neuen Beobachtungen und weiteren Experimenten führen sollte.  
    Bemerkenswert ist unter anderem der Zusammenhang, wie sich die Veränderung des Divisors eines Vollkreises, der die Positionierung der "children" eines jeden Balls bestimmt, auf die Bewegung und das Muster der Anordnung bis hin zu den kleinsten Bällen auswirkt, ebenso wie die entstehende Farbkonstellation -->
</div>
<div class="flex-item excess">
  <h2 id="fraktal">Fraktal</h2>
  <div
    class="visual-presentation-container"
    style="position: relative; display: inline-block; cursor: pointer"
  >
    <a href="Code/Fraktal/start.html" target="_blank">
      <img src="Fraktal.PNG" alt="Fraktal" width="100%" />
    </a>
    <div class="klicken-indicator">Klicken zum Anwenden</div>
    <div class="primary-info-container">
      <div class="team-size-container">
        <i class="material-icons">person</i>1
      </div>
      <div class="context-awards">
        <i class="fas fa-umbrella-beach"></i>
      </div>
      <div class="tags">
        <span class="tag">Rekursion</span>
      </div>
      <span class="duration"><i class="fa fa-calendar"></i>&nbsp;&nbsp;2d</span>
    </div>
  </div>
  <h4>
    Akademische Vorbereitung<br />
    Solo-Projekt<br />
    Sommer 2019<br />
    Mathematik-Visualisierung
  </h4>
  <br />
  <div class="skills">
    <strong>TypeScript, CanvasRenderingContext2D, Rekursion</strong><br />
    <em>Experimentell – Mathematisch – Selbstständig</em><br />
    <strong>Git</strong>
  </div>
  <br />
  <ul class="task-list">
    <li>
      <strong>Ohne konkrete Vorstellung</strong><br />
      <span
        >Experimentelle Entwicklung einer Applikation zur Visualisierung von
        rekursiven Strukturen in Fraktalen</span
      >
      <ul>
        <li>Bälle mit rekursiven "create-children"-Objektmethoden</li>
      </ul>
    </li>
    <li>
      <strong>Farbwinkelberechnung</strong><br />
      <span
        >Kolorierung abhängig von Iterationsstufe und Ordnung der
        Fraktalstrukturen berechnet</span
      >
      <ul>
        <li>Ästhetik durch prozedurale Algorithmen</li>
      </ul>
    </li>
    <li>
      <strong>Technische Experimente</strong><br />
      <span
        >Experimente mit maximaler Browserauflösung und verschiedenen
        Iterationsparametern</span
      >
      <ul>
        <li>
          Zoom eines 10.000 x 10.000 Pixel Bild, um repetitive Strukturen
          nahtlos entdecken zu können
        </li>
        <li>Veränderung der Winkel und Anzahl Kinder pro Ball</li>
      </ul>
    </li>
  </ul>
  <div class="controls">
    Parameter können verändert werden, um die Darstellung zu beeinflussen
  </div>
  <!-- Die Idee für diese Applikation kam mir auf, als ich die Möglichkeiten der grafischen Visualisierung durch Rekursion begriff. Das klare Endergebnis konnte ich mir, je nach Anzahl von Iteratifonen, noch nicht vorstellen, weshalb ich es sofort ausprobierte, mit dem Ziel, mich von meinem eigenen Programm zum Staunen zu bewegen.  
    Instanzierte Bälle mit "create-children" Objektmethoden schafften dies bereits. Es folgten einige Experimente mit der maximal umsetzbaren Auflösung verschiedener Browser, um ein fertig gerendertes Bild von 10000 mal 10000 Pixeln zu erhalten, welches sich stark vergrößern lässt, um die repetitiven Strukturen nahtlos entdecken zu können.  
    Daraufhin, ebenfalls ohne eine konkrete Vorstellung des Ergebnisses, begann ich den Farbwinkel abhängig von der Iterationsstufe und der Ordnung der zirkular positionierten Kreise sowohl relativ, als auch absolut zu berechnen. Auch hier war ich von der Ästhetik der visualisierten Mathematik überrascht und begeistert.  
      Auf der Seite können Sie einige Parameter der Berechnung verändern. -->
</div>
<div class="flex-item excess">
  <h2 id="cardioids">Cardioids</h2>
  <div
    class="visual-presentation-container"
    style="position: relative; display: inline-block; cursor: pointer"
  >
    <a href="Code/Cardioids/start.html" target="_blank">
      <video width="100%" controls loop poster="cardioids.PNG">
        <source src="Cardioids.mp4" alt="Cardioids" type="video/mp4" />
        Ihr Browser unterstützt den Video-Tag nicht
      </video>
    </a>
    <div class="klicken-indicator">Klicken zum Anwenden</div>
    <div class="primary-info-container">
      <div class="team-size-container">
        <i class="material-icons">person</i>1
      </div>
      <div class="context-awards">
        <i class="fa-solid fa-person-chalkboard"></i>
      </div>
      <div class="tags">
        <span class="tag">Kreisberechnung</span>
        <span class="tag">Algebra</span>
      </div>
      <span class="duration"><i class="far fa-clock"></i>&nbsp;&nbsp;3h</span>
    </div>
  </div>
  <h4>
    Schulvortrag<br />
    Solo-Projekt<br />
    Frühling 2019<br />
    Herzkurve-Playground
  </h4>
  <br />
  <div class="skills">
    <strong
      >TypeScript, CanvasRenderingContext2D, Kreisberechnung, Algebra</strong
    ><br />
    <em>Präsentativ – Mathematisch – Selbstständig</em><br />
    <strong>Git</strong>
  </div>
  <br />
  <ul class="task-list">
    <li>
      <strong
        >Fortgeschrittene <a href="#cardoids-tutorial">Präsentation</a> im
        Mathematikunterricht</strong
      ><br />
      <span>Muster durch zirkulare Multiplikationstabellen</span>
      <ul>
        <li>Physikalischer Zusammenhang mit Lichtreflexionen</li>
        <li>Ähnlichkeit zum Mandelbrot-Fraktal</li>
        <li>Erklärung in meinem vertonten Video</li>
      </ul>
    </li>
    <li>
      <strong>Programmiertechnische Umsetzung</strong><br />
      <span>Interaktive Anwendung zur Parametrisierung der Epizykloide </span>
      <ul>
        <li>Einstellung von Faktor, Auflösung, Linienstärke</li>
        <li>
          Fließender Übergang vom Kardioid zum Nephroid zum Trefoil zu
          beliebigen k-blättrigen Epizykloiden
        </li>
      </ul>
    </li>
    <li>
      <strong>Erforschen von Mustern durch Zahlen</strong><br />
      <span>Experimentelles Entdecken weiterer mathematischer Phänome</span>
      <ul>
        <li>Große Faktoren führen zu visuellen Überraschungen</li>
        <li>Epizykloide mit gebrochen-zahligen Faktoren</li>
        <li>Mandala-ähnliche Ästhetik durch Formeln der Mathematik</li>
      </ul>
    </li>
  </ul>
  <div class="controls">
    Parameter können verändert werden, um die Darstellung zu beeinflussen
  </div>
  <!-- Dieses Projekt ist durch eine Präsentationsarbeit im Fach Mathematik der 13. Klasse entstanden. Meine Mitschüler und ich durften uns entweder aus vorgegebenen, oder eigens ausgesuchten fortgeschrittenen Themen der Mathematik widmen. Für letzteres wählte ich aus meiner schon bestehenden Kenntnis einiger mathematischer/physikalischer Phänomene die der Kardioide aus.  
    Um die Beschreibung der dahinter liegenden Mathematik zu vermeiden, verweise ich an dieser Stelle auf das Endresultat innerhalb des Mathematik-Projekts, welches aus diesem vertonten [Video](#video) bestand.   
    Um den Mitschülern die Thematik näher zu bringen und dafür zu faszinieren, programmierte ich diese Anwendung. Bei höheren Werten des in der Applikation auch von Ihnen einstellbaren Parameters "Faktor", sowie dem ab dann interressanten Parameter "Lines", ist für mich bis heute der eindeutige Zusammenhang der eingestellten Werte mit den entstehenden Mustern zugegebenermaßen nicht eindeutig erklärbar. -->
</div>
<div class="flex-item excess">
  <h2 id="rubber-band">Rubber Band</h2>
  <div
    class="visual-presentation-container"
    style="position: relative; display: inline-block; cursor: pointer"
  >
    <a href="Code/RubberBand/start.html" target="_blank">
      <video width="100%" controls loop poster="Rubber.PNG">
        <source src="RubberBand.mp4" alt="RubberBand" type="video/mp4" />
        Ihr Browser unterstützt den Video-Tag nicht
      </video>
    </a>
    <div class="klicken-indicator">Klicken zum Spielen</div>
    <div class="primary-info-container">
      <div class="team-size-container">
        <i class="material-icons">person</i>1
      </div>
      <div class="context-awards">
        <i class="fas fa-umbrella-beach"></i>
      </div>
      <div class="tags">
        <span class="tag">Vektoraddition</span>
      </div>
      <span class="duration"><i class="far fa-clock"></i>&nbsp;&nbsp;1h</span>
    </div>
  </div>
  <h4>
    Freizeit-Experiment<br />
    Solo-Projekt<br />
    Frühling 2019<br />
    Physik-Simulation
  </h4>
  <br />
  <div class="skills">
    <strong>TypeScript, CanvasRenderingContext2D, Vektoraddition</strong><br />
    <em>Experimentell – Physikalisch – Selbstständig</em><br />
    <strong>Git</strong>
  </div>
  <br />
  <ul class="task-list">
    <li>
      <strong>Dynamische Physik-Interaktion</strong><br />
      <span>Simulation von Massen mit Krafteinwirkung</span>
      <ul>
        <li>Koppelung durch einfache Vektoraddition</li>
        <li>Mausgesteuerte Kinematische Masse beeinflusst die Bewegung</li>
      </ul>
    </li>
    <li>
      <strong>Gummiband-ähnliche Bewegung</strong><br />
      <span>Verknüpfte Massen reagieren auf Veränderungen</span>
      <ul>
        <li>Elastizität</li>
      </ul>
    </li>
    <li>
      <strong>Erweiterbarkeit zur Stoff-Simulation</strong><br />
      <span
        >Grundlage für eine zukünftige Simulation von flexiblen Stoffen</span
      >
      <ul>
        <li>Planung eines Rastersystems für realistische Materialverformung</li>
      </ul>
    </li>
  </ul>
  <div class="controls">Kinematische Masse steuern: Mausbewegung</div>
  <!-- Grundlage für diese Physik-Simulation war die in Echtzeit stattfindende Anwendung physikalischem Verhaltens auf Körper, die von dem Mauszeiger beeinflusst werden. Durch simple Vektoradition erschuf ich damit schon ein System dreier gekoppelter Massen, deren Verhalten annähernd Gummibändern ähneln.  
    Hieraus wird sich in naher Zukunft noch eine Simulation eines ganzen Rasters dieser Massen entwickeln, um Stoff zu simulieren (Cloth-Simulation). -->
</div>
